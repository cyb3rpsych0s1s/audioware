searchState.loadedDescShard("rtrb", 0, "A realtime-safe single-producer single-consumer (SPSC) …\nThe consumer side of a <code>RingBuffer</code>.\nExtension trait used to provide a <code>copy_to_uninit()</code> method …\nThe queue was empty.\nThe queue was empty.\nThe queue was full.\nError type for <code>Consumer::peek()</code>.\nError type for <code>Consumer::pop()</code>.\nThe producer side of a <code>RingBuffer</code>.\nError type for <code>Producer::push()</code>.\nA bounded single-producer single-consumer (SPSC) queue.\nReturns a read-only reference to the ring buffer.\nReturns a read-only reference to the ring buffer.\nReturns the capacity of the queue.\nWriting and reading multiple items at once into and from a …\nCopies contents to a possibly uninitialized slice.\nDrops all non-empty slots.\nThis method tests for <code>self</code> and <code>other</code> values to be equal, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the corresponding <code>Consumer</code> has been …\nReturns <code>true</code> if the corresponding <code>Producer</code> has been …\nReturns <code>true</code> if there are currently no slots available for …\nReturns <code>true</code> if there are currently no slots available for …\nCreates a <code>RingBuffer</code> with the given <code>capacity</code> and returns …\nAttempts to read an element from the queue without …\nAttempts to pop an element from the queue.\nAttempts to push an element into the queue.\nReturns <code>n</code> slots for reading.\nReturns the number of slots available for writing.\nReturns the number of slots available for reading.\nReturns <code>n</code> slots (initially containing their <code>Default</code> value) …\nReturns <code>n</code> (uninitialized) slots for writing.\nError type for <code>Consumer::read_chunk()</code>, …\nStructure for reading from multiple slots in one go.\nAn iterator that moves out of a <code>ReadChunk</code>.\nFewer than the requested number of slots were available.\nStructure for writing into multiple (<code>Default</code>-initialized) …\nStructure for writing into multiple (uninitialized) slots …\nReturns two slices for writing to the requested slots.\nReturns two slices for writing to the requested slots.\nReturns two mutable slices for reading from the requested …\nReturns two slices for reading from the requested slots.\nMakes the first <code>n</code> slots of the chunk available for reading.\nMakes the first <code>n</code> slots of the chunk available for reading.\nDrops the first <code>n</code> slots of the chunk, making the space …\nMakes the whole chunk available for reading.\nMakes the whole chunk available for reading.\nDrops all slots of the chunk, making the space available …\nMakes all iterated slots available for writing again.\nMoves items from an iterator into the (uninitialized) …\nFills all slots with the <code>Default</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns a <code>ReadChunk</code> into an iterator.\nReturns <code>true</code> if the chunk contains no slots.\nReturns <code>true</code> if the chunk contains no slots.\nReturns <code>true</code> if the chunk contains no slots.\nReturns the number of slots in the chunk.\nReturns the number of slots in the chunk.\nReturns the number of slots in the chunk.")