searchState.loadedDescShard("ini", 0, "Ini parser for Rust\nOnly escape the most necessary things. This means …\nEscape basics and non-ASCII characters in the Basic …\nEscape basics and all non-ASCII characters, including …\nUses “\\n” as new line separator\nUses “\\r\\n” as new line separator\nError while parsing an INI document\nPolicies for escaping logic\nEscape everything that some INI implementations assume\nIni struct\nNewline style\nNo value.\nEscape absolutely nothing (dangerous)\nParse error\nParsing configuration\nProperties type (key-value pairs)\nIterator for traversing sections\nInternal storage of property’s key\nEscape reserved symbols. This includes everything in …\nEscape reserved symbols and non-ASCII characters in the …\nEscape reserved symbols and all non-ASCII characters, …\nA view into an <code>Ini</code>, which may either be vacant or occupied.\nIterator for traversing sections\nIterator for traversing sections\nIterator for traversing sections\nInternal storage of section’s key\nA view into a occupied entry in a <code>Ini</code>\nA setter which could be used to set key-value pair in a …\nA view into a vacant entry in a <code>Ini</code>\nSome value of type <code>T</code>.\nSystem-dependent line separator\nWriting configuration\nAdd (append) key-value pair in this section\nAppend a new section\nAppend key with (key, value) pair\nString representation\nClear all entries\nReturn true if property exist\nCreates an ini instance with an empty general section. …\nDelete the first entry in this section with <code>key</code>\nDelete the first section with key, return the properties …\nDelete the key from the section, return the value if key …\nInterpret <code>\\</code> as an escape character For example\nEnables values that span lines\nPreserve key leading whitespace\nAllow quote (<code>&quot;</code> or <code>&#39;</code>) in value For example\nGet the entry\nPolicies about how to escape characters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the immutable general section\nGet the mutable general section\nGet the entry in this section with <code>key</code>\nGet the first value associate with the key\nGet all values associate with the key\nGet the first value from the sections with key\nGet the first mutable value from the sections with key\nGet the first value from the sections with key, return the …\nInsert one new section\nInsert (key, value) pair by replace\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInto the first internal mutable properties\nCheck if properties has 0 elements\nCheck if object contains no section\nGet an iterator of the properties\nImmutable iterate though sections\nGet a mutable iterator of the properties\nMutable iterate though sections\nKey value separator\nGet the number of the properties\nTotal sections count\nNewline style\nLoad from a file\nLoad from a file, but do not interpret ’&#39; as an escape …\nLoad from a file with options\nLoad from a string\nLoad from a string, but do not interpret ’&#39; as an escape …\nLoad from a string with options\nMutable iterate though sections\nCreate an instance\nCreate an instance\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nLoad from a reader\nLoad from a reader, but do not interpret ’&#39; as an escape …\nLoad from a reader with options\nRemove the property with the first value of the key\nRemove the property with all values with the same key\nGet a immutable section\nGet all sections immutable with the same key\nGet all sections mutable with the same key\nGet a mutable section\nIterate with sections\nSet (replace) key-value pair in this section (all with the …\nSet key-value to a section\nGiven a character this returns true if it should be …\nSet with general section, a simple wrapper of …\nSet with a specified section, <code>None</code> is for the general …\nWrite to a writer\nWrite to a file\nWrite to a file with options\nWrite to a file\nWrite to a writer with options\nWrite to a writer")