searchState.loadedDescShard("windows_core", 0, "Core type support for COM and Windows\nA type representing an agile reference to a COM/WinRT …\nA WinRT array stores elements contiguously in a …\nA trait for retrieving the implementation behind a COM or …\nA 32-bit value representing boolean values and returned by …\nA BSTR string (BSTR) is a length-prefixed wide string.\nA counted pointer to a type that implements COM …\nIdentifies types that can be placed in <code>ComObject</code>.\nDescribes the COM interfaces implemented by a specific COM …\nContains the error value\nAn error object consists of both an error code and …\nA type that you can use to declare and implement an event …\nCustom code to free a handle.\nA globally unique identifier (GUID) used to identify COM …\nReturns the canonical type name for the underlying object.\nGets the trust level of the current object.\nAn error code value returned by most COM functions.\nAn (HSTRING) is a reference-counted and immutable UTF-16 …\nAn HSTRING builder that supports preallocating the <code>HSTRING</code> …\nThe <code>GUID</code> associated with the interface.\nParent interface for all WinRT interfaces.\nBase interface for all COM interfaces.\nProvides low-level access to an interface vtable.\nThis has the same memory representation as <code>IFoo</code>, but …\nContains the success value\nProvides automatic parameter conversion in cases where the …\nA borrowed type with the same memory layout as the type …\nThe generated <code>&lt;foo&gt;_Impl</code> type (aka the “boxed” type or …\nA wrapper to provide ownership for handles to …\nA pointer to a constant null-terminated string of 8-bit …\nA pointer to a constant null-terminated string of 16-bit …\nA pointer to a null-terminated string of 8-bit Windows …\nA pointer to a null-terminated string of 16-bit Unicode …\nProvides automatic parameter conversion in cases where the …\nA borrowed type with the same memory layout as the type …\nA specialized <code>Result</code> type that provides Windows error …\nEnables applications to define COM objects using static …\n<code>Weak</code> holds a non-owning reference to an object.\nRegisters a delegate with the event object.\nCalls <code>op</code> if <code>self</code> is a success code, otherwise returns …\nConverts the <code>BOOL</code> to a <code>bool</code> value.\nString data without the trailing 0\nString data without the trailing 0\nAllows the <code>HSTRING</code> to be constructed from bytes.\nSafety\nSafety\nReturns a pointer to the implementation object.\nGets a borrowed reference to an interface that is …\nGets a borrowed interface that is implemented by <code>T</code>.\nThe error object describing the error.\nReturns a raw pointer to the <code>PCSTR</code>\nReturns a raw pointer to the <code>PCWSTR</code>\nReturns a raw pointer to the <code>PSTR</code>\nReturns a raw pointer to the <code>PWSTR</code>.\nReturns the raw COM interface pointer. The resulting …\nReturns the raw COM interface pointer. The resulting …\nConverts the argument to a <code>Option&lt;&amp;T&gt;</code> reference.\nReturns a slice containing the entire array.\nString data without the trailing 0\nString data without the trailing 0.\nInvokes all of the event object’s registered delegates …\nCasts to a given interface type.\nAttempts to cast the current interface to another …\nAttempts to cast the current interface to another …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>]. It …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>]. It …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>]. It …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>]. It …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>]. It …\nThis casts the given COM interface to [<code>&amp;dyn Any</code>].\nThis casts the given COM interface to [<code>&amp;dyn Any</code>].\nClears the contents of the array.\nClears the event, removing all delegates.\nConverts the argument to an <code>Option&lt;T&gt;</code> by cloning the …\nThe error code describing the error.\nSpecifies the first 8 hexadecimal digits.\nSpecifies the first group of 4 hexadecimal digits.\nSpecifies the second group of 4 hexadecimal digits.\nThe first 2 bytes contain the third group of 4 hexadecimal …\nAllow this string to be displayed.\nAllow this string to be displayed.\nAllow this string to be displayed.\nAllow this string to be displayed.\nAttempts to create a <code>Weak</code> reference to this object.\nAttempts to create a <code>Weak</code> reference to this object.\nCreates an error object without any failure information.\nAsserts that <code>self</code> is a success code using the given panic …\nAttempts to load the factory object for the given WinRT …\nCalls the handle’s free function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new error object with an error code, but without …\nCreates an <code>InterfaceRef</code> from an interface reference. This …\nMaps an NT error code to an HRESULT value.\nWraps <code>outer</code> in a <code>StaticComObject</code>.\nCreates a new <code>ComObject</code> that points to an existing boxed …\nConstruct a new <code>PCSTR</code> from a raw pointer\nConstruct a new <code>PCWSTR</code> from a raw pointer\nConstruct a new <code>PSTR</code> from a raw pointer\nConstruct a new <code>PWSTR</code> from a raw pointer.\nCreates an <code>Interface</code> by taking ownership of the <code>raw</code> COM …\nCreates an <code>Interface</code> by taking ownership of the <code>raw</code> COM …\nCreates an <code>InterfaceRef</code> from a raw pointer. <em>This is </em>…\nCreates an <code>Interface</code> that is valid so long as the <code>raw</code> COM …\nCreates an <code>Interface</code> that is valid so long as the <code>raw</code> COM …\nCreates an array from a pointer and length. The <code>len</code> …\nCreates a <code>GUID</code> for a “generic” WinRT type.\nCreates an array by copying the elements from the slice.\nCreates a <code>GUID</code> from a <code>u128</code> value.\nCreates a <code>GUID</code> with the given constant values.\nCreate a <code>BSTR</code> from a slice of 16 bit characters (wchars).\nCreate a <code>HSTRING</code> from a slice of 16 bit characters …\nCreates a new <code>Error</code> from the Win32 error code returned by …\nMaps a Win32 error code to an HRESULT value.\nGets a reference to the shared object stored in the box.\nGets access to the contained value.\nGets a mutable reference to the object stored in the box, …\nA literal HSTRING, length-prefixed wide string with a …\nImplements one or more COM interfaces.\nDefines a COM interface to call or implement.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an interface that it implements.\nMoves an instance of this type into a new ComObject box …\nReturns the raw COM interface pointer and releases …\nReturns the raw COM interface pointer and releases …\nReturns <code>true</code> if the string length is zero, and <code>false</code> …\nReturns <code>true</code> if the string length is zero, and <code>false</code> …\nReturns <code>true</code> if the array is empty.\nReturns <code>true</code> if <code>self</code> is a failure code.\nChecks whether the <code>PCSTR</code> is null\nChecks whether the <code>PCWSTR</code> is null\nChecks whether the <code>PSTR</code> is null\nChecks whether the <code>PWSTR</code> is null.\nReturns <code>true</code> if the argument is null.\nReturns <code>true</code> if the argument is null.\nReturns <code>true</code> if the given COM interface refers to an …\nReturns <code>true</code> if the given COM interface refers to an …\nReturns <code>true</code> if <code>self</code> is a success code.\nString length without the trailing 0\nString length without the trailing 0\nReturns the length of the array.\nCalls <code>op</code> if <code>self</code> is a success code, otherwise returns …\nThe error message describing the error.\nThe error message describing the error.\nCreate an empty <code>BSTR</code>.\nCreate an empty <code>HSTRING</code>.\nCreates a preallocated <code>HSTRING</code> value.\nCreates a new error object, capturing the stack and other …\nAllocates a heap cell (box) and moves <code>value</code> into it. …\nCreates an empty array.\nCreates a new, empty <code>Event&lt;T&gt;</code>.\nCreates an agile reference to the object.\nTakes ownership of the handle.\nCreates a unique <code>GUID</code> value.\nCreates a new <code>Weak</code> object without any backing object.\nConstruct a null <code>PCSTR</code>\nConstruct a null <code>PCWSTR</code>\nConstruct a null <code>PSTR</code>\nConstruct a null <code>PWSTR</code>.\nConverts the <code>HRESULT</code> to <code>Result&lt;()&gt;</code>.\nConverts the <code>BOOL</code> to <code>Result&lt;()&gt;</code>.\nConverts the argument to a <code>Result&lt;&amp;T&gt;</code> reference.\nCall <code>QueryInterface</code> on this interface\nCall <code>QueryInterface</code> on this interface\nRevokes a delegate’s registration from the event object.\nRetrieves a proxy to the target of the <code>AgileReference</code> …\nA literal UTF-8 string with a trailing null terminator.\nIf this object has only a single object reference (i.e. …\nCopy the <code>PCWSTR</code> into an <code>HSTRING</code>.\nCopy the <code>PWSTR</code> into an <code>HSTRING</code>.\nGets an owned (counted) reference to an interface that is …\nGet the contents of this <code>HSTRING</code> as a OsString.\nCalls AddRef on the underlying COM interface and returns …\nCreates an <code>InterfaceRef</code> for this reference. The …\nCreates an <code>InterfaceRef</code> for this reference. The …\nCopy the <code>PCSTR</code> into a Rust <code>String</code>.\nCopy the <code>PCWSTR</code> into a Rust <code>String</code>.\nCopy the <code>PSTR</code> into a Rust <code>String</code>.\nCopy the <code>PWSTR</code> into a Rust <code>String</code>.\nGet the contents of this <code>HSTRING</code> as a String lossily.\nConverts a <code>GUID</code> to a <code>u128</code> value.\nShortens the string by removing any trailing 0 characters.\nAsserts that <code>self</code> is a success code.\nAsserts that <code>self</code> is a success code.\nConverts the argument to a <code>&amp;T</code> reference.\nAttempts to upgrade the weak reference to a strong …\nA literal UTF-16 wide string with a trailing null …\nCreates an array of the given length with default values.\nOverwrites a memory location with the given value without …\nCreates a <code>GUID</code> represented by the all-zero byte-pattern.")