searchState.loadedDescShard("atomic_arena", 0, "<code>atomic_arena</code> provides a generational <code>Arena</code> that you can …\nA container of items that can be accessed via a <code>Key</code>.\nManages <code>Key</code> reservations for an <code>Arena</code>.\nA unique identifier for an item in an <code>Arena</code>.\nReturns the total capacity of the arena.\nReturns the total capacity for this <code>Arena</code>.\nReturns a <code>Controller</code> for this <code>Arena</code>.\nReturns an iterator that removes and yields all elements …\nError types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared reference to the item in the <code>Arena</code> with …\nReturns a mutable reference to the item in the <code>Arena</code> with …\nTries to reserve a <code>Key</code>, and, if successful, inserts an …\nTries to insert an item into the <code>Arena</code> with a previously …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the arena is empty.\nReturns <code>true</code> if the <code>Arena</code> is currently empty.\n<code>Arena</code> iterators.\nReturns an iterator over shared references to the items in …\nReturns an iterator over mutable references to the items in\nReturns the number of items in the arena.\nReturns the number of items currently in the <code>Arena</code>.\nCreates a new <code>Arena</code> with enough space for <code>capacity</code> number …\nIf the <code>Arena</code> contains an item with the given <code>Key</code>, removes …\nRetains only the elements specified by the predicate.\nTries to reserve a key for the <code>Arena</code>.\nReturned when trying to reserve an key on a full <code>Arena</code>.\nAn error that can occur when inserting an item into an …\nCannot insert with this key because the slot index or …\nCannot insert with this key because it is not reserved.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator that removes and yields elements from an <code>Arena</code> …\nIterates over shared references to the items in the <code>Arena</code>.\nIterates over mutable references to the items in the <code>Arena</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")