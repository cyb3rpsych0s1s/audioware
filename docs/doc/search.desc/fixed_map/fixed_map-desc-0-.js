searchState.loadedDescShard("fixed_map", 0, "  \nThe trait for a key that can be used to store values in a …\nDerive to implement the <code>Key</code> trait.\nA fixed map with storage specialized through the <code>Key</code> trait.\nThe <code>Map</code> storage implementation to use for the key …\nA fixed set with storage specialized through the <code>Key</code> trait.\nThe <code>Set</code> storage implementation to use for the key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator visiting all values in arbitrary order. The …\nContains the fixed <code>Map</code> implementation.\nRaw access to underlying storage.\nContains the fixed <code>Set</code> implementation.\nA view into a single entry in a map, which may either be …\nThe iterator produced by <code>Map::into_iter</code>.\nConsuming iterator.\nThe iterator produced by <code>Map::iter</code>.\nImmutable iterator over storage.\nThe iterator produced by <code>Map::iter</code>.\nMutable iterator over storage.\nThe iterator produced by <code>Map::keys</code>.\nImmutable iterator over keys in storage.\nA fixed map with storage specialized through the <code>Key</code> trait.\nThe trait defining how storage works.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>Map</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>Map</code>. It is part of the …\nThe iterator produced by <code>Map::values</code>.\nImmutable iterator over values in storage.\nThe iterator produced by <code>Map::values_mut</code>.\nMutable iterator over values in storage.\nProvides in-place mutable access to an occupied entry …\nThis is the storage abstraction for <code>Map::clear</code>.\nClears the map, removing all key-value pairs. Keeps the …\nThis is the storage abstraction for <code>Map::contains_key</code>.\nReturns <code>true</code> if the map currently contains the given key.\nConstruct empty storage.\nThis is the storage abstraction for <code>Map::entry</code>.\nGets the given key’s corresponding <code>Entry</code> in the <code>Map</code> for …\nReturns the argument unchanged.\nThis is the storage abstraction for <code>Map::get</code>.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nThis is the storage abstraction for <code>Map::get_mut</code>.\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nThis is the storage abstraction for <code>Map::insert</code>.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nThis is the storage abstraction for <code>Map::into_iter</code>.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCheck if storage is empty.\nReturns true if the map contains no elements.\nThis is the storage abstraction for <code>Map::iter</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nThis is the storage abstraction for <code>Map::iter_mut</code>.\nAn iterator visiting all key-value pairs in arbitrary …\nGets a copy of the key in the entry.\nGets a copy of the key that would be used when inserting a …\nReturns a copy of this entry’s key.\nThis is the storage abstraction for <code>Map::keys</code>.\nAn iterator visiting all keys in arbitrary order. The …\nGet the length of storage.\nGets the current length of a <code>Map</code>.\nCreates an empty <code>Map</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nThis is the storage abstraction for <code>Map::remove</code>.\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the value at the key …\nThis is the storage abstraction for <code>Map::retain</code>.\nRetains only the elements specified by the predicate.\nThis is the storage abstraction for <code>Map::values</code>.\nAn iterator visiting all values in arbitrary order. The …\nThis is the storage abstraction for <code>Map::values_mut</code>.\nAn iterator visiting all values mutably in arbitrary order.\nTrait implemented for storage which can be easily …\nThe backing raw value.\nGet the raw value of the storage.\nBuild storage from raw storage.\nThe iterator produced by <code>Set::into_iter</code>.\nThe iterator produced by <code>Set::iter</code>.\nA fixed set with storage specialized through the <code>Key</code> trait.\nGet the raw value of the set.\nClears the set, removing all values.\nReturns <code>true</code> if the set currently contains the given value.\nConstruct the set from a raw value.\nAdds a value to the set.\nReturns true if the set contains no elements.\nAn iterator visiting all values in arbitrary order. The …\nReturns the number of elements in the set.\nCreates an empty <code>Set</code>.\nRemoves a value from the set. Returns <code>true</code> if the value was\nRetains only the elements specified by the predicate.\nModule that defines the <code>SetStorage</code> trait.\n<code>SetStorage</code> for <code>bool</code> types.\n<code>SetStorage</code> for dynamically stored types, using …\nOwning iterator over the storage.\nImmutable iterator over storage.\n<code>SetStorage</code> for <code>Option</code> types.\nThe trait defining how storage works for <code>Set</code>.\n<code>SetStorage</code>  types that can only inhabit a single value …\nThis is the storage abstraction for <code>Set::clear</code>.\nThis is the storage abstraction for <code>Set::contains</code>.\nConstruct empty storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is the storage abstraction for <code>Set::insert</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the storage abstraction for <code>Set::into_iter</code>.\nCheck if storage is empty.\nThis is the storage abstraction for <code>Set::iter</code>.\nGet the length of storage.\nThis is the storage abstraction for <code>Set::remove</code>.\nThis is the storage abstraction for <code>Set::retain</code>.")