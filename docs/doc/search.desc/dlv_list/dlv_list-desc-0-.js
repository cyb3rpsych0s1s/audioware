searchState.loadedDescShard("dlv_list", 0, "Crate that implements a semi-doubly linked list via a …\nAn iterator that yields and removes all entries from the …\nA wrapper type that indicates an index into the list.\nAn iterator that yields all indices in the list.\nAn iterator that moves all entries out of the entry list.\nAn iterator that yields immutable references to entries in …\nAn iterator that yields mutable references to entries in …\nA semi-doubly linked list implemented with a vector.\nReturns an immutable reference to the value at the back of …\nReturns the index of the value at the back of the list, if …\nReturns a mutable reference to the value at the back of …\nReturns the capacity of the list.\nRemoves all values from the list and invalidates all …\nReturns whether or not the list contains the given value.\nCreates a draining iterator that removes all values from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference to the value at the front …\nReturns the index of the value at the front of the list, …\nReturns a mutable reference to the value at the front of …\nReturns an immutable reference to the value at the given …\nReturns a mutable reference to the value at the given …\nReturns the index of the value next to the value at the …\nReturns the index of the value previous to the value at …\nReturns an immutable reference to the value at the given …\nReturns an mutable reference to the value at the given …\nCreates an indices iterator which will yield all indices …\nInserts the given value after the value at the given index.\nInserts the given value before the value at the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the list is empty.\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields mutable references to …\nReturns the number of values in the list.\nMove the node at <code>index</code> to after the node at <code>target</code>.\nMove the node at <code>index</code> to before the node at <code>target</code>.\nCreates a new list with no initial capacity.\nReorganizes the existing values to ensure maximum cache …\nReorganizes the existing values to ensure maximum cache …\nRemoves and returns the value at the back of the list, if …\nRemoves and returns the value at the front of the list, if …\nInserts the given value to the back of the list.\nInserts the given value to the front of the list.\nRemoves and returns the value at the given index, if it …\nReserves capacity for the given expected size increase.\nRemoves all elements from the list not satisfying the …\nCreates a new list with the given capacity.")