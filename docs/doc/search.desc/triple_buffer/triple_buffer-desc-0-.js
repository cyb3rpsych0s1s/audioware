searchState.loadedDescShard("triple_buffer", 0, "In this crate, we propose a Rust implementation of triple …\nProducer interface to the triple buffer\nRAII Guard to the buffer provided by an <code>Input</code>.\nConsumer interface to the triple buffer\nA triple buffer, useful for nonblocking and thread-safe …\nCheck if the consumer has fetched our latest submission yet\nConstruct a triple buffer with a default-constructed value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the input buffer directly\nAccess the input buffer directly\nAccess the input buffer wrapped in the <code>InputPublishGuard</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a triple buffer with a certain initial value\nAccess the input buffer directly\nAccess the output buffer directly\nQuery the current value of the output buffer\nPublish the current input buffer, checking for overwrites\nAccess the latest value from the triple buffer\nExtract input and output of the triple buffer\nShorthand for <code>TripleBuffer::new(initial).split()</code>\nUpdate the output buffer\nTell whether an updated value has been submitted by the …\nWrite a new value into the triple buffer")