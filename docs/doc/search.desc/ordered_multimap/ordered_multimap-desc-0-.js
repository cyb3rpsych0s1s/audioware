searchState.loadedDescShard("ordered_multimap", 0, "This crate provides a type <code>ListOrderedMultimap</code> which is a …\nProvides types related to the usage of <code>ListOrderedMultimap</code>.\nAn immutable reference to a key. This implies that the key …\nDummy hasher that is not meant to be used. It is simply a …\nA view into a single entry in the multimap, which may …\nAn iterator that yields immutable references to all values …\nAn iterator that moves all values of a given key out of a …\nAn iterator that yields mutable references to all values …\nAn iterator that owns and yields all key-value pairs in a …\nAn iterator that yields immutable references to all …\nAn iterator that yields mutable references to all …\nAn iterator that yields immutable references to all keys …\nAn iterator that yields mutable references to all keys and …\nA wrapper around a key that is either borrowed or owned.\nAn iterator that yields immutable references to all keys …\nA multimap that associates with each key a list of values.\nAn occupied entry associated with one or more values.\nA view into an occupied entry in the multimap.\nAn owned key. This will occur when a key is no longer …\nA random state to use for the hashmap in the multimap.\nA vacant entry with no associated values.\nA view into a vacant entry in the multimap.\nAn iterator that yields immutable references to all values …\nAn iterator that yields mutable references to all values …\nCalls the given function with a mutable reference to the …\nExamples\nAppends a value to the list of values associated with the …\nReturns an immutable reference to the first key-value pair …\nReturns an immutable reference to the first key-value pair …\nRemoves all keys and values from the multimap.\nReturns whether the given key is in the multimap.\nReturns whether the given key is in the multimap.\nReturns the number of values associated with a key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an immutable reference to the first key-value pair …\nReturns an immutable reference to the first key-value pair …\nExamples\nReturns an immutable reference to the first value, by …\nReturns an iterator that yields immutable references to …\nReturns an iterator that yields mutable references to all …\nExamples\nReturns a mutable reference to the first value, by …\nReturns a reference to the multimap’s <code>BuildHasher</code>.\nExamples\nExamples\nInserts the key-value pair into the multimap and returns …\nExamples\nInserts the key-value pair into the multimap and returns …\nExamples\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExamples\nExamples\nIf the key wrapped is owned, it is returned. Otherwise, …\nReturns whether the wrapped key is borrowed.\nReturns whether the multimap is empty.\nReturns whether the wrapped key is owned.\nExamples\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields immutable references to …\nCreates an iterator that yields mutable references to all …\nCreates an iterator that yields immutable references to …\nReturns an iterator that yields immutable references to …\nExamples\nReturns an iterator that yields mutable references to all …\nExamples\nExamples\nReturns an iterator that yields immutable references to …\nReturns the number of keys the multimap can hold without …\nReturns the number of keys in the multimap.\nExamples\nCreates a new multimap with no initial capacity.\nIf the entry is vacant, the given value will be inserted …\nIf the entry is vacant, the given value will be inserted …\nIf the entry is vacant, the value returned from the given …\nIf the entry is vacant, the value returned from the given …\nReorganizes the multimap to ensure maximum spatial …\nReorganizes the multimap to ensure maximum spatial …\nReturns an iterator that yields immutable references to …\nReturns an iterator that yields immutable references to …\nRemoves the last key-value pair to have been inserted.\nRemoves the first key-value pair to have been inserted.\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nExamples\nRemoves all values associated with the given key from the …\nReserves additional capacity such that more keys can be …\nReserves additional capacity such that more values can be …\nKeeps all key-value pairs that satisfy the given predicate …\nReturns an iterator that yields immutable references to …\nReturns the number of values the multimap can hold without …\nReturns the total number of values in the multimap across …\nReturns an iterator that yields mutable references to all …\nCreates a new multimap with the specified capacities.\nCreates a new multimap with the specified capacities and …\nCreates a new multimap with no capacity which will use the …")