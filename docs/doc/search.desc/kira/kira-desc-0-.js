searchState.loadedDescShard("kira", 0, "Kira\nControls audio from gameplay code.\nSettings for an <code>AudioManager</code>.\nPlay the sound from both speakers at the same volume.\nSpecifies how many of each resource type an audio context …\nThe action should occur when a clock reaches a specific …\nOnly output the dry signal.\nRepresents a change in volume.\nThe action should occur a certain amount of time from now.\nCurves the motion of a <code>Tween</code>.\nA fixed value.\nA stereo audio sample.\nThe distance of the current spatial track to a listener.\nThe value of a <code>modulator</code>.\nThe decibel value that produces no change in volume.\nThe action should occur immediately.\nCauses the <code>Tween</code> to start slow, speed up, and then slow …\nCauses the <code>Tween</code> to start slow, speed up, and then slow …\nCauses the <code>Tween</code> to start slow and speed up. A higher …\nCauses the <code>Tween</code> to start slow and speed up. A higher …\nAn error occurred when initializing the sound.\nPlay the sound from the left speaker only.\nMaintains a constant speed for the duration of the <code>Tween</code>.\nA transformation from a modulator’s value to a parameter …\nAn amount to blend the “dry” and “wet” outputs …\nCauses the <code>Tween</code> to start fast and slow down. A higher …\nCauses the <code>Tween</code> to start fast and slow down. A higher …\nThe stereo positioning of a sound.\nManages and updates a value that can be smoothly …\nErrors that can occur when playing a sound.\nHow quickly a sound should be played, where <code>1.0</code> is the …\nPlay the sound from the right speaker only.\nAn error that is returned when a resource cannot be added …\nThe minimum decibel value at which a sound is considered …\nA change in pitch in semitones.\nCould not play a sound because the maximum number of …\nDescribes when an action should occur.\nDescribes a smooth transition between values.\nA trait for types that can be smoothly interpolated.\nA value that a parameter can be linked to.\nOnly output the wet signal.\nA <code>Frame</code> with both the left and right samples set to <code>0.0</code>.\nCreates a clock.\nCreates a listener.\nCreates a modulator.\nAdds <code>rhs</code> to the minimum and maximum values of the output …\nCreates a mixer send track.\nAdds a spatial mixer sub-track.\nCreates a mixer sub-track.\nConverts decibels to amplitude, a linear volume …\nReturns the frame mixed down to mono.\nCommunication between Kira and a low-level audio API.\nReturns a mutable reference to this manager’s backend.\nConfigures the backend.\nSpecifies how many of each resource type an audio context …\nPrecise timing for audio events.\nReturns the number of clocks that can exist at a time.\nThe maximum number of clocks that can exist at a time.\nHelpers for sending commands from the gameplay thread to …\nCreates a set of command writers and readers and a …\nDivides the minimum and maximum values of the output range …\nThe duration of the motion.\nThe curve of the motion.\nThe curve to apply to the output.\nModifies audio signals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Value::FromModulator</code> from a modulator ID or …\nCreates a frame with both the left and right channels set …\nTypes for providing info about resources to trait …\nA range of values from a modulator.\nDetermines how often modulators and clocks will be updated …\nReturns an linearly interpolated value between <code>a</code> and <code>b</code>.\nGiven a previous frame, a current frame, the two next …\nReturns the interpolated value between the previous and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sample for the left channel.\nTypes related to spatial listeners.\nThe maximum number of listeners that can exist at a time.\nReturns a handle to the main mixer track.\nConfigures the main mixer track.\nTransforms an input value to an output value using this …\nGlobal values that parameters (like volume and playback …\nReturns the number of modulators that can exist at a time.\nThe maximum number of modulators that can exist at a time.\nMultiplies the minimum and maximum values of the output …\nNegates the minimum and maximum values of the output range.\nCreates a new <code>AudioManager</code>.\nCreates a frame with the given left and right values.\nCreates a new <code>Parameter</code> with an initial <code>Value</code>.\nReturns the number of clocks that currently exist.\nReturns the number of modulators that currently exist.\nReturns the number of mixer send tracks that currently …\nReturns the number of mixer sub-tracks that currently …\nThe corresponding range of values of the parameter.\nPans a frame to the left or right.\nPlays a sound.\nReturns the previous actual value of the parameter.\nReads a <code>ValueChangeCommand</code> from a <code>CommandReader</code>, and if …\nSets the minimum and maximum values of the output range to …\nThe sample for the right channel.\nReturns the number of mixer send tracks that can exist at …\nThe maximum number of mixer send tracks that can exist at …\nStarts a transition from the current value to the target …\nSources of audio.\nWhen the motion starts.\nSubtracts <code>rhs</code> from the minimum and maximum values of the …\nReturns the number of mixer sub-tracks that can exist at a …\nThe maximum number of mixer sub-tracks that can exist at a …\nConverts a <code>Value&lt;T&gt;</code> to a <code>Value&lt;T2&gt;</code>.\nConverts a <code>Mapping&lt;T&gt;</code> to a <code>Mapping&lt;T2&gt;</code>.\nOrganizes and applies effects to audio.\nUpdates any in-progress transitions and keeps the value …\nReturns the current actual value of the parameter.\nThe modulator to link to.\nHow the modulator’s value should be converted to the …\nConnects a <code>Renderer</code> to a lower level audio API.\nThe default backend used by <code>AudioManager</code>s.\nErrors that can occur when using this backend.\nProduces <code>Frame</code>s of audio data to be consumed by a …\nSettings for this backend.\nPlays audio using cpal.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUseful for testing and benchmarking.\nCalled by the backend when the sample rate of the audio …\nCalled by the backend when it’s time to process a new …\nProduces the next <code>Frame</code>s of audio.\nStarts the backend and returns itself and the initial …\nSends the renderer to the backend to start audio playback.\nAn error occurred when building the audio stream.\nA backend that uses cpal to connect a <code>Renderer</code> to the …\nSettings for the cpal backend.\nAn error occurred when getting the default output …\nErrors that can occur when using the cpal backend.\nA default audio output device could not be determined.\nAn error occurred when starting the audio stream.\nThe buffer size used by the device. If it is set to …\nThe output audio device to use. If <code>None</code>, the default output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of unhandled stream errors discarded …\nReturns the oldest reported CPU usage in the queue.\nReturns the oldest available stream error in the queue.\nA backend that does not connect to any lower-level audio …\nSettings for the mock backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the <code>on_start_processing</code> callback of the <code>Renderer</code>.\nCalls the <code>process</code> callback of the <code>Renderer</code>.\nThe sample rate that the <code>Renderer</code> should run at.\nChanges the sample rate of the <code>Renderer</code>.\nControls a clock.\nA unique identifier for a clock.\nThe rate that a clock ticks at.\nAn instant in time associated with a clock.\nThe clock ticks every x seconds.\nThe clock ticks x times per minute.\nThe clock ticks x times per second.\nReturns the <code>ClockSpeed</code> as a number of seconds between each …\nReturns the <code>ClockSpeed</code> as a number of ticks per minute.\nReturns the <code>ClockSpeed</code> as a number of ticks per second.\nThe clock this time is associated with.\nThe amount of time since the last tick as a fraction of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ClockTime</code> for a clock with the specified number …\nCreates a <code>ClockTime</code> for a clock with the specified number …\nReturns the unique identifier for the clock.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPauses the clock.\nSets the speed of the clock.\nStarts or resumes the clock.\nStops and resets the clock.\nReturns <code>true</code> if the clock is currently ticking and <code>false</code> …\nThe elapsed time in whole ticks.\nReturns the current time of the clock.\nReads values that were written to a <code>CommandWriter</code>.\nWrites values that can be sent to a <code>CommandReader</code>.\nA command that holds a target <code>Value</code> and a <code>Tween</code>.\nCreates a command writer/reader pair.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the latest value that was written to the …\nThe new value to set something to.\nThe tween to use to smoothly transition the value.\nWrites a new value, overwriting any previous values.\nReceives input audio from a mixer track and outputs …\nConfigures an effect.\nAllows the user to control the effect from gameplay code.\nCreates the effect and a handle to the effect.\nReduces (or increases) the dynamic range of audio.\nAdds echoes to a sound.\nMakes a sound harsher and noisier.\nAdjusts the volume of a frequency range of a sound.\nRemoves frequencies from a sound.\nCalled when the effect is first sent to the renderer.\nCalled when the sample rate of the renderer is changed.\nCalled whenever a new batch of audio samples is requested …\nAdjusts the panning of audio.\nTransforms a slice of input <code>Frame</code>s.\nAdds reverberations to a sound. Useful for simulating room …\nAdjusts the volume of audio.\nConfigures a compressor.\nControls a compressor.\nSets how much time it takes for the volume attenuation to …\nHow much time it takes for the volume attenuation to ramp …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the amount to change the volume after processing (in …\nThe amount to change the volume after processing (in dB).\nSets how much dry (unprocessed) signal should be blended …\nHow much dry (unprocessed) signal should be blended with …\nCreates a new <code>CompressorBuilder</code> with the default settings.\nSets how much the signal will be compressed.\nHow much the signal will be compressed.\nSets how much time it takes for the volume attenuation to …\nHow much time it takes for the volume attenuation to relax …\nSets how much time it takes for the volume attenuation to …\nSets the amount to change the volume after processing (in …\nSets how much dry (unprocessed) signal should be blended …\nSets how much the signal will be compressed.\nSets how much time it takes for the volume attenuation to …\nSets the volume above which volume will start to be …\nSets the volume above which volume will start to be …\nThe volume above which volume will start to be decreased …\nConfigures a delay effect.\nControls a delay effect.\nAdds an effect to the feedback loop.\nSets the amount of time the input audio is delayed by.\nSets the amount of feedback.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets how much dry (unprocessed) signal should be blended …\nCreates a new <code>DelayBuilder</code> with the default settings.\nSets the amount of feedback.\nSets how much dry (unprocessed) signal should be blended …\nAdds an effect to the feedback loop and returns the …\nConfigures a distortion effect.\nControls a distortion effect.\nDifferent types of distortion.\nThe signal will be clamped to the -1.0 to 1.0 range.\nThe signal will be kept in the -1.0 to 1.0 range, and the …\nSets the factor to multiply the signal by before applying …\nThe factor to multiply the signal by before applying the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the kind of distortion to use.\nThe kind of distortion to use.\nSets how much dry (unprocessed) signal should be blended …\nHow much dry (unprocessed) signal should be blended with …\nCreates a new <code>DistortionBuilder</code> with the default settings.\nSets how much distortion should be applied.\nSets the kind of distortion to use.\nSets how much dry (unprocessed) signal should be blended …\nFrequencies around the user-defined frequency are adjusted.\nConfigures an EQ filter.\nControls an EQ filter.\nThe shape of the frequency adjustment curve.\nFrequencies around and higher than the user-defined …\nFrequencies around and lower than the user-defined …\nThe “center” or “corner” of the frequency range to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe volume adjustment for frequencies in the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe shape of the frequency adjustment curve.\nCreates a new <code>EqFilterBuilder</code>.\nThe width of the frequency range to adjust.\nSets the “center” or “corner” of the frequency …\nSets the volume adjustment for frequencies in the …\nSets the shape of the frequency adjustment curve.\nSets the width of the frequency range to adjust.\nRemoves frequencies above and below the cutoff frequency.\nConfigures a filter effect.\nControls a filter effect.\nThe frequencies that the filter will remove.\nRemoves frequencies below the cutoff frequency.\nRemoves frequencies above the cutoff frequency.\nRemoves frequencies around the cutoff frequency.\nSets the cutoff frequency of the filter (in hertz).\nThe cutoff frequency of the filter (in hertz).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets how much dry (unprocessed) signal should be blended …\nHow much dry (unprocessed) signal should be blended with …\nSets the frequencies that the filter will remove.\nThe frequencies that the filter will remove.\nCreates a new <code>FilterBuilder</code> with the default settings.\nSets the resonance of the filter.\nThe resonance of the filter.\nSets the cutoff frequency of the filter (in hertz).\nSets how much dry (unprocessed) signal should be blended …\nSets the frequencies that the filter will remove.\nSets the resonance of the filter.\nConfigures a panning control effect.\nControls a panning control effect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the panning adjustment to apply to input audio.\nConfigures a reverb effect.\nControls a reverb effect.\nSets how quickly high frequencies disappear from the …\nHow quickly high frequencies disappear from the …\nSets how much the room reverberates. A higher value will …\nHow much the room reverberates. A higher value will result …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets how much dry (unprocessed) signal should be blended …\nHow much dry (unprocessed) signal should be blended with …\nCreates a new <code>ReverbBuilder</code> with the default settings.\nSets how quickly high frequencies disappear from the …\nSets how much the room reverberates. A higher value will …\nSets how much dry (unprocessed) signal should be blended …\nSets the stereo width of the reverb effect (0.0 being …\nSets the stereo width of the reverb effect (0.0 being …\nThe stereo width of the reverb effect (0.0 being fully …\nConfigures a volume control effect.\nControls a volume control effect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>VolumeControlBuilder</code>.\nSets the volume adjustment to apply to input audio.\nInformation about the current state of a clock.\nProvides info about resources on the audio thread.\nThe thing should start later because the appropriate clock …\nInformation about a listener.\nGenerates a fake <code>Info</code> with arbitrary data. Useful for …\nThe thing will never start because the clock it depends on …\nThe thing should start now.\nWhen something should start given the current state of the …\nAdds a fake clock with the given ticking state and time. …\nAdds a fake listener at the given position and …\nAdds a fake modulator outputting the given value. Returns …\nConsumes the <code>MockInfoProvider</code> and returns a fake <code>Info</code>.\nGets information about the clock with the given ID if it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the interpolated orientation between the previous …\nReturns the interpolated position between the previous and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is called from an effect on a spatial track, …\nGets information about the listener linked to the current …\nGets the value of the modulator with the given ID if it …\nCreates a new <code>MockInfoBuilder</code>.\nThe rotation of the listener.\nThe position of the listener.\nThe rotation of the listener prior to the last update.\nThe position of the listener prior to the last update.\nWhether the clock is currently running.\nThe current time of the clock.\nReturns whether something with the given start time should …\nControls a listener.\nA unique identifier for a listener.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the unique identifier for this listener.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the rotation of the listener.\nSets the location of the listener in the spatial scene.\nAllows the user to control the modulator from gameplay …\nProduces a stream of values that a parameter can be linked …\nConfigures a modulator.\nA unique identifier for a modulator.\nCreates the modulator and a handle to the modulator.\nWhether the modulator can be removed from the audio …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOscillates back and forth.\nCalled whenever a new batch of audio samples is requested …\nSmoothly transitions values to other values.\nUpdates the modulator.\nReturns the current output of the modulator.\nConfigures an LFO modulator.\nControls an LFO modulator.\nThe value jumps back and forth between two values.\nThe value moves gradually in one direction, then abruptly …\nThe value moves back and forth smoothly.\nThe value moves back and forth at a constant speed.\nDescribes an oscillation pattern.\nSets how much the value oscillates.\nHow much the value oscillates.\nSets how quickly the value oscillates.\nHow quickly the value oscillates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier for the modulator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>LfoBuilder</code> with the default settings.\nSets a constant value that the modulator is offset by.\nThe constant value the modulator is offset by.\nSets how much the value oscillates.\nSets how quickly the value oscillates.\nSets a constant value that the modulator is offset by.\nSets the phase of the LFO (in radians).\nSets the oscillation pattern.\nSets the phase the LFO should start at (in radians).\nThe phase the LFO should start at (in radians).\nSets the oscillation pattern.\nThe oscillation pattern.\nThe ratio between how much time the oscillator spends on …\nConfigures a tweener.\nControls a tweener.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the unique identifier for the modulator.\nThe initial value of the tweener.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStarts a transition from the current value to a target …\nA user-defined time in seconds.\nThe end of the audio data.\nThe ending time of a region of audio.\nErrors that can occur when starting the sound.\nErrors that can occur when loading or streaming an audio …\nThe type that can be used to control the sound once it has …\nA trait for types that can be converted into an …\nAn error occurred while reading the file from the …\nCould not determine the default audio track in the file.\nPlayback is paused.\nThe sound is fading out, and when the fade-out is …\nA point in time in a piece of audio.\nThe playback state of a sound.\nThe sound is playing normally.\nA portion of audio.\nThe sound is fading back in after being previously paused.\nThe time in samples (individual audio data points).\nThe time in seconds.\nAn actively playing sound.\nA source of audio that is loaded, but not yet playing.\nThe sound has stopped and can no longer be resumed.\nThe sound is fading out, and when the fade-out is …\nAn error occurred when parsing the file.\nCould not determine the duration of the audio.\nCould not determine the sample rate of the audio.\nThe audio uses an unsupported channel configuration. Only …\nThe sound is paused, but is schedule to resume in the …\nThe (exclusive) ending time of the region.\nReturns <code>true</code> if the sound is finished and can be unloaded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the type into an <code>Option&lt;Region&gt;</code>.\nConverts the loaded sound into a live, playing sound and a …\nWhether the sound is advancing and outputting audio given …\nCalled whenever a new batch of audio samples is requested …\nProduces the next <code>Frame</code>s of audio. This should overwrite …\nProcesses a single <code>Frame</code>. Mostly useful for testing.\nThe starting time of the region (in seconds).\nPlayable chunks of audio that are loaded into memory all …\nDecodes data gradually from an audio file.\nA piece of audio loaded into memory all at once.\nControls a static sound.\nSettings for a static sound.\nReturns the duration of the audio.\nSets the tween used to fade in the sound from silence.\nSets the tween used to fade in the sound from silence.\nAn optional fade-in from silence.\nReturns the nth <code>Frame</code> of audio in the <code>StaticSoundData</code>.\nThe raw samples that make up the audio.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a cursor wrapping audio file data into a …\nLoads an audio file into a <code>StaticSoundData</code>.\nLoads an audio file from a type that implements Symphonia…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the portion of the sound that should be looped.\nSets the portion of the sound that should be looped.\nThe portion of the sound that should be looped.\nCreates a new <code>StaticSoundSettings</code> with the default …\nReturns the number of frames in the <code>StaticSoundData</code>.\nSets the panning of the sound, where 0 is hard left and 1 …\nSets the panning of the sound, where 0 is hard left and 1 …\nThe panning of the sound, where 0 is hard left and 1 is …\nFades out the sound to silence with the given tween and …\nSets the playback rate of the sound.\nSets the playback rate of the sound.\nThe playback rate of the sound.\nReturns the current playback position of the sound (in …\nResumes playback and fades in the sound from silence with …\nResumes playback at the given start time and fades in the …\nSets whether the sound should be played in reverse.\nSets whether the sound should be played in reverse.\nWhether the sound should be played in reverse.\nThe sample rate of the audio (in Hz).\nMoves the playback position by the specified amount of …\nSets the playback position to the specified time in …\nSets the portion of the sound that will play in a loop.\nSets the panning of the sound, where <code>-1.0</code> is hard left, <code>0.0</code>…\nSets the playback rate of the sound.\nSets the volume of the sound.\nSettings for the sound.\nSets the portion of the audio this <code>StaticSoundData</code> …\nThe portion of the sound this <code>StaticSoundData</code> represents.\nSets where in the sound playback should start.\nSets where in the sound playback should start.\nWhere in the sound playback should start.\nSets when the sound should start playing.\nSets when the sound should start playing.\nWhen the sound should start playing.\nReturns the current playback state of the sound.\nFades out the sound to silence with the given tween and …\nReturns the total duration of the audio, regardless of its …\nSets the volume of the sound.\nSets the volume of the sound.\nThe volume of the sound.\nReturns a cheap clone of the <code>StaticSoundData</code> with the …\nDecodes chunks of audio.\nErrors that can occur when decoding audio.\nA streaming sound that is not playing yet.\nControls a streaming sound.\nSettings for a streaming sound.\nDecodes the next chunk of audio.\nReturns the duration of the audio.\nSets the tween used to fade in the instance from silence.\nSets the tween used to fade in the instance from silence.\nAn optional fade-in from silence.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>StreamingSoundData</code> for a cursor wrapping audio …\nCreates a <code>StreamingSoundData</code> for a <code>Decoder</code>.\nCreates a <code>StreamingSoundData</code> for an audio file.\nCreates a <code>StreamingSoundData</code> for a type that implements …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the portion of the sound that should be looped.\nSets the portion of the sound that should be looped.\nThe portion of the sound that should be looped.\nCreates a new <code>StreamingSoundSettings</code> with the default …\nReturns the total number of samples of audio.\nReturns the number of frames in the <code>StreamingSoundData</code>.\nSets the panning of the sound, where 0 is hard left and 1 …\nSets the panning of the sound, where -1.0 is hard left and …\nThe panning of the sound, where 0 is hard left and 1 is …\nFades out the sound to silence with the given tween and …\nSets the playback rate of the sound.\nSets the playback rate of the sound.\nThe playback rate of the sound.\nReturns an error that occurred while decoding audio, if …\nReturns the current playback position of the sound (in …\nResumes playback and fades in the sound from silence with …\nResumes playback at the given start time and fades in the …\nReturns the sample rate of the audio (in Hz).\nSeeks to an audio sample.\nMoves the playback position by the specified amount of …\nSets the playback position to the specified time in …\nSets the portion of the sound that will play in a loop.\nSets the panning of the sound, where <code>-1.0</code> is hard left, <code>0.0</code>…\nSets the playback rate of the sound.\nSets the volume of the sound.\nSettings for the streaming sound.\nSets the portion of the audio this <code>StreamingSoundData</code> …\nThe portion of the sound this <code>StreamingSoundData</code> …\nSets where in the sound playback should start.\nSets where in the sound playback should start.\nWhere in the sound playback should start.\nSets when the sound should start playing.\nSets when the sound should start playing.\nWhen the sound should start playing.\nReturns the current playback state of the sound.\nFades out the sound to silence with the given tween and …\nReturns the total duration of the audio, regardless of its …\nSets the volume of the sound.\nSets the volume of the sound.\nThe volume of the sound.\nReturns the <code>StreamingSoundData</code> with the specified settings.\nConfigures the main mixer track.\nControls the main mixer track.\nAn error that’s returned when trying to change the …\nPlayback is paused.\nThe track is fading out, and when the fade-out is …\nThe track is playing normally.\nThe track is fading back in after being previously paused.\nConfigures a mixer track.\nControls a mixer track.\nA unique identifier for a mixer send track.\nConfigures a spatial mixer track.\nThe distances from a listener at which an emitter is …\nControls a mixer track.\nConfigures a mixer track.\nControls a mixer track.\nThe playback state of a mixer sub-track.\nThe track is paused, but is schedule to resume in the …\nAdds an already built effect into this track.\nAdds an already built effect into this track.\nAdds an already built effect into this track.\nAdds an already built effect into this track.\nAdds an effect to the track.\nAdds an effect to the send track.\nAdds an effect to the track.\nAdds an effect to the track.\nAdds a spatial child track to this track.\nAdds a spatial child track to this track.\nAdds a child track to this track.\nAdds a child track to this track.\nSets how the emitter’s volume will change with distance.\nSets the distances from a listener at which the emitter is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a unique identifier for this send track.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the track is outputting audio given its current …\nThe distance from a listener at which an emitter becomes …\nThe distance from a listener at which an emitter outputs …\nCreates a new <code>MainTrackBuilder</code> with the default settings.\nCreates a new <code>SendTrackBuilder</code> with the default settings.\nCreates a new <code>TrackBuilder</code> with the default settings.\nCreates a new <code>SpatialTrackBuilder</code> with the default …\nReturns the number of sounds currently playing on this …\nReturns the number of sounds currently playing on this …\nReturns the number of sounds currently playing on this …\nReturns the number of child tracks this track has.\nReturns the number of child tracks this track has.\nFades out the track to silence with the given tween and …\nFades out the track to silence with the given tween and …\nSets whether the track should stay alive while sounds are …\nSets whether the track should stay alive while sounds are …\nPlays a sound.\nPlays a sound.\nPlays a sound.\nResumes playback and fades in the sound from silence with …\nResumes playback and fades in the sound from silence with …\nResumes playback at the given start time and fades in the …\nResumes playback at the given start time and fades in the …\nSets the position that audio is produced from.\nSets the volume of this track’s route to a send track.\nSets the volume of this track’s route to a send track.\nSets how much the track’s output should be panned left …\nSets the (post-effects) volume of the mixer track.\nSets the (post-effects) volume of the send track.\nSets the (post-effects) volume of the mixer track.\nSets the (post-effects) volume of the mixer track.\nSets the maximum number of sounds that can be played …\nSets the maximum number of sounds that can be played …\nSets the maximum number of sounds that can be played …\nReturns the maximum number of sounds that can play …\nReturns the maximum number of sounds that can play …\nReturns the maximum number of sounds that can play …\nSets how much the track’s output should be panned left …\nReturns the current playback state of the track.\nReturns the current playback state of the track.\nSets the maximum number of sub-tracks this track can have.\nSets the maximum number of sub-tracks this track can have.\nReturns the maximum number of child tracks this track can …\nReturns the maximum number of child tracks this track can …\nSets the volume of the main mixer track.\nSets the volume of the send track.\nSets the volume of the track.\nSets the volume of the track.\nAdd an already-built effect and return the <code>MainTrackBuilder</code>…\nAdd an already-built effect and return the <code>SendTrackBuilder</code>…\nAdd an already-built effect and return the <code>TrackBuilder</code>.\nAdd an already-built effect and return the …\nAdds an effect to the track and returns the …\nAdds an effect to the send track and returns the …\nAdds an effect to the track and returns the <code>TrackBuilder</code>.\nAdds an effect to the track and returns the …\nRoutes this track to the given send track with the given …\nRoutes this track to the given send track with the given …")